# -*- coding: utf-8 -*-
"""Desafio - AfroDev.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iPHLa0VgrRbNyHsLRckJXYJWcxVQajgT
"""

import pandas as pd
import numpy as np
from pandas import read_excel
import matplotlib.pyplot as plt

df_atletas = pd.read_excel("/content/Athletes.xlsx")
df_treinadores = pd.read_excel("/content/Coaches.xlsx")
df_genero = pd.read_excel("/content/EntriesGender.xlsx")
df_medalha = pd.read_excel("/content/Medals.xlsx")
df_time = pd.read_excel("/content/Teams.xlsx")

#Total de atletas participantes.
def total_atletas():
  atletas = df_atletas.shape[0] 
  return print(f"A quantidade total de atletas é : {atletas}")

total_atletas()

# Total de participantes homens.
def total_homens():
  quantidade_homens = df_genero["Male"].sum()
  return print(f"A quantidade de atletas do gênero maculino é: {quantidade_homens}")

total_homens()

# Total de participantes mulheres.
def total_mulheres():
  quantidade_mulheres = df_genero["Female"].sum()
  return print(f"A quantidade de atletas do gênero feminino é: {quantidade_mulheres}")

total_mulheres()

# Total de participantes por esporte.
def soma_colunas(df, nova_coluna, colunas_a_somar):
    df[nova_coluna] = df[colunas_a_somar].astype(int).sum(axis=1)
    return(df)
def participantes_por_esporte():
  soma = soma_colunas(df_genero, 'Total', ['Female','Male'])
  total = soma[['Discipline','Total']]
  return total

participantes_por_esporte()

# Total de medalhas por país.
def medalhas_por_pais():
  soma_medalhas = soma_colunas(df_medalha, 'Total', ['Gold', 'Silver', 'Bronze'])
  total_medalhas = soma_medalhas[['Team/NOC', 'Total']]
  return total_medalhas

medalhas_por_pais()

# Ranking por medalhas totais.
def ranking_total():
  total = medalhas_por_pais()
  return total.sort_values('Total', ascending = False)

ranking_total()

# País com mais medalhas de ouro.
def max_ouro():
  maximo_ouro = df_medalha['Gold'].max()
  return df_medalha.loc[df_medalha['Gold'] == maximo_ouro]

max_ouro()

# País com mais medalhas de prata.
def max_prata():
  maximo_prata = df_medalha['Silver'].max()
  return df_medalha.loc[df_medalha['Silver'] == maximo_prata]

max_prata()

# País com mais medalhas de bronze.
def max_bronze():
  maximo_bronze = df_medalha['Bronze'].max()
  return df_medalha.loc[df_medalha['Bronze'] == maximo_bronze]

max_bronze()

#País com menos medalhas de ouro.
def min_ouro():
  minimo_ouro = df_medalha['Gold'].min()
  return df_medalha.loc[df_medalha['Gold'] == minimo_ouro]

min_ouro()

#País com menos medalhas de prata.
def min_prata():
  minimo_prata = df_medalha['Silver'].min()
  return df_medalha.loc[df_medalha['Silver'] == minimo_prata]

min_prata()

# País com menos medalhas de bronze.
def min_bronze():
  minimo_bronze = df_medalha['Bronze'].min()
  return df_medalha.loc[df_medalha['Bronze'] == minimo_bronze]

min_bronze()

# Lista com esportes participantes.
def esportes():
  esportes  = df_genero['Discipline']
  return esportes
  
esportes()

# Lista de esportes com mais mulheres que homens.
def mais_mulheres():
  total_mulheres = df_genero.loc[df_genero['Female'] > df_genero['Male']]
  return total_mulheres

mais_mulheres()

# Lista de esportes com mais homens que mulheres.
def mais_homens():
  total_homens = total_mulheres = df_genero.loc[df_genero['Male'] > df_genero['Female']]
  return total_homens 

mais_homens()

# Quantidade de treinadores por país.
def treinadores_pais():
  total = df_treinadores.groupby(by='NOC').size()
  return total

treinadores_pais()

#País com a maior quantidade de treinadores
def mais_treinadores():
  mais  = df_treinadores['NOC'].value_counts()
  return mais

mais_treinadores()

# Quantidade de treinadores por esporte.
def treinadores_por_esporte():
  quantidade = df_treinadores['Discipline'].value_counts()
  return quantidade

treinadores_por_esporte()

#Quanto times por esporte cada país tem.
def times_por_pais():
  quantidade = (df_time.groupby(['NOC', 'Discipline']).size() \
  .sort_values(ascending=False) \
  .reset_index(name='Total') )
  return quantidade

times_por_pais()

#df_genero.plot(figsize=(10,10))

#df_medalha.plot()